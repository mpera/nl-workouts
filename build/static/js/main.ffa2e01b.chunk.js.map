{"version":3,"sources":["components/Plan.jsx","components/Data.jsx","utilities/time-greeting.js","utilities/random-message.js","components/Log.jsx","components/NavigationBar.jsx","serviceWorker.js","index.js"],"names":["Plan","react_default","a","createElement","Data","timeGreeting","hour","moment","messages","randomMessage","Math","floor","random","length","TextArea","Input","SubMenu","Menu","Log","state","modalVisible","redirectTo","message","showModal","_this","setState","hideModal","goToPlan","goToData","renderPage","console","log","react_router","to","menu","es_menu","map","workoutType","title","Item","Fragment","className","dropdown","overlay","href","icon","type","rate","allowHalf","defaultValue","es_radio","Group","size","Button","value","rows","this","es_button","onClick","modal","visible","closable","onCancel","footer","React","Component","NavigationBar","mode","react_router_dom","Boolean","window","location","hostname","match","routing","components_NavigationBar","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffa2e01b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Plan() {\n  return (\n    <div>\n      <h1> Planning component </h1>\n    </div>\n  );\n}\n\nexport default Plan;","import React from 'react';\n\nfunction Data() {\n    return (\n      <div>\n        <h1> Data component </h1>\n      </div>\n    );\n}\n    \nexport default Data;","import moment from 'moment';\n\nconst timeGreeting = () => {\n    const hour = moment().hour();\n    if (hour < 12) {\n        return \"Good morning\";\n    }\n    if (hour >= 12 && hour < 17) {\n        return \"Good afternoon\";\n    }\n    return \"Good evening\";\n}\n\nexport default timeGreeting;\n","const messages = [\n    \"Way to go!! üí™\",\n    \"You rock! ü•≥\",\n    \"Keep up the good work! üèãüèΩ\",\n    \"My, you're looking fit üòò\",\n    \"You inspire me every day ‚òÄÔ∏è\",\n    \"Wow! I'm lucky to be on your team! üçÄ\",\n];\n\nconst randomMessage = () => {\n    return messages[Math.floor(Math.random() * messages.length)];\n}\n\nexport default randomMessage;\n\n","import React from 'react';\nimport './Log.css';\nimport timeGreeting from '../utilities/time-greeting.js';\nimport randomMessage from '../utilities/random-message';\nimport { Menu, Dropdown, Icon, Rate, Radio, Input, Button, Modal } from 'antd';\nimport { Redirect } from 'react-router-dom'\nconst { TextArea } = Input;\nconst { SubMenu } = Menu;\n\n\nclass Log extends React.Component {\n  state = {\n    modalVisible: false,\n    redirectTo: '/log',\n    message: 'Way to go!! üí™',\n  };\n\n  showModal = () => {\n    this.setState({\n      modalVisible: true,\n    });\n  };\n\n  hideModal = () => {\n    this.setState({\n      modalVisible: false,\n    });\n  };\n\n  goToPlan = () => {\n    this.setState({\n      redirectTo: '/plan',\n    });\n  };\n\n  goToData = () => {\n    this.setState({\n      redirectTo: '/data',\n    });\n  };\n\n  renderPage = () => {\n    console.log(this.state.redirectTo);\n    return <Redirect to={this.state.redirectTo} />\n  };\n\n  render() {\n    const workoutTypes = ['Track', 'Lifting', 'Throwing', 'Pod'];\n\n    const menu = (\n      <Menu>\n        {workoutTypes.map((workoutType) => (\n          <SubMenu title={workoutType}>\n            <Menu.Item>Workout 1</Menu.Item>\n            <Menu.Item>Workout 2</Menu.Item>\n            <Menu.Item>Workout 3</Menu.Item>\n            <Menu.Item>Add new</Menu.Item>\n          </SubMenu>\n        ))}\n\n      </Menu>\n    );\n\n    return (\n      <React.Fragment>\n        <h1 className='welcomeMessage'> {timeGreeting()}, Boots! ‚ù§Ô∏è </h1>\n        <div className='row'>\n          <div className='questionText'>\n            What did you do?\n          </div>\n          <div>\n            <Dropdown overlay={menu}>\n              <a className=\"ant-dropdown-link\" href=\"#\">\n                Tell us! <Icon type='down' />\n              </a>\n            </Dropdown>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='questionText'>\n            How was it?\n        </div>\n          <div>\n            <Rate allowHalf defaultValue={0} />\n          </div>\n        </div>\n        <div className='row'>\n          <div className='questionText'>\n            How does your body feel?\n        </div>\n          <div>\n            <Radio.Group defaultValue=\"a\" size=\"large\">\n              <Radio.Button value=\"a\">Painful</Radio.Button>\n              <Radio.Button value=\"b\">Tweaky</Radio.Button>\n              <Radio.Button value=\"c\">Sore</Radio.Button>\n              <Radio.Button value=\"d\">Tired</Radio.Button>\n              <Radio.Button value=\"e\">Average</Radio.Button>\n              <Radio.Button value=\"f\">Strong</Radio.Button>\n            </Radio.Group>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='questionText'>\n            Workout notes\n        </div>\n          <div>\n            <TextArea rows={2} />\n          </div>\n        </div>\n        <div className='row'>\n          {this.renderPage()}\n          <Button type='primary' size='large' onClick={this.showModal}>Submit</Button>\n          <Modal\n            title=\"Successfully logged\"\n            visible={this.state.modalVisible}\n            closable={true}\n            onCancel={this.hideModal}\n            //okButtonProps={{}}\n            //cancelButtonProps={{}}\n            footer={[\n              <Button onClick={this.goToPlan}>\n                See your plan\n              </Button>,\n              <Button onClick={this.goToData}>\n                See your data\n              </Button>\n            ]}\n          >\n            <p className='modal'>{randomMessage()}</p>\n          </Modal>\n        </div>\n      </React.Fragment >\n    );\n  }\n}\n\nexport default Log;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Icon } from 'antd';\n\nfunction NavigationBar() {\n    return (\n        <div>\n            <Menu mode=\"horizontal\">\n                <Menu.Item>\n                    <Link to=\"/log\">\n                        <Icon type=\"smile\" /> Log\n                </Link>\n                </Menu.Item>\n                <Menu.Item>\n                    <Link to=\"/plan\">\n                        <Icon type=\"calendar\" /> Plan\n                </Link>\n                </Menu.Item>\n                <Menu.Item>\n                    <Link to=\"/data\">\n                        <Icon type=\"bar-chart\" /> Data\n                </Link>\n                </Menu.Item>\n            </Menu>\n        </div>\n    );\n}\n\nexport default NavigationBar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport Plan from './components/Plan.jsx';\nimport Data from './components/Data.jsx';\nimport Log from './components/Log.jsx';\nimport NavigationBar from './components/NavigationBar.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <Router>\n        <div>\n            <NavigationBar />\n            <Route exact path=\"/\" component={Log} />\n            <Route path=\"/log\" component={Log} />\n            <Route path=\"/plan\" component={Plan} />\n            <Route path=\"/data\" component={Data} />\n        </div>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}